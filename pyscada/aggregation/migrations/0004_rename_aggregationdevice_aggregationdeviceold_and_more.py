# Generated by Django 4.2.5 on 2024-02-05 10:19

from django.db import migrations, models
import django.db.models.deletion
from .. import PROTOCOL_ID, __app_name__

from django.db import migrations
from django.db.utils import ProgrammingError

# from django.apps import apps as global_apps
from django.db.migrations.recorder import MigrationRecorder

import logging

logger = logging.getLogger(__name__)


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    try:
        AggregationDeviceOld = apps.get_model("aggregation", "AggregationDeviceOld")
        AggregationDevice = apps.get_model("aggregation", "AggregationDevice")
        AggregationVariableOld = apps.get_model("aggregation", "AggregationVariableOld")
        AggregationVariable = apps.get_model("aggregation", "AggregationVariable")
        db_alias = schema_editor.connection.alias

        # copy devices
        for ad in AggregationDevice.objects.using(db_alias).all():
            ado = AggregationDeviceOld.objects.using(db_alias).get_or_create(
                aggregation_device=ad.aggregation_device,
                variable=ad.variable,
            )
            logger.info(ado)
        # copy variables
        for ad in AggregationVariable.objects.using(db_alias).all():
            ado = AggregationVariableOld.objects.using(db_alias).get_or_create(
                aggregation_variable=ad.aggregation_variable,
                period=ad.period,
            )
            logger.info(ado)
    except (ProgrammingError, LookupError) as e:
        logger.info(e)


def reverse_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    try:
        AggregationDeviceOld = apps.get_model("aggregation", "AggregationDeviceOld")
        AggregationDevice = apps.get_model("aggregation", "AggregationDevice")
        AggregationVariableOld = apps.get_model("aggregation", "AggregationVariableOld")
        AggregationVariable = apps.get_model("aggregation", "AggregationVariable")
        db_alias = schema_editor.connection.alias

        # copy devices
        for ad in AggregationDeviceOld.objects.using(db_alias).all():
            ado = AggregationDevice.objects.using(db_alias).get_or_create(
                aggregation_device=ad.aggregation_device,
                variable=ad.variable,
            )
            logger.info(ado)
        # copy variables
        for ad in AggregationVariableOld.objects.using(db_alias).all():
            ado = AggregationVariable.objects.using(db_alias).get_or_create(
                aggregation_variable=ad.aggregation_variable,
                period=ad.period,
            )
            logger.info(ado)
    except (ProgrammingError, LookupError) as e:
        logger.info(e)


"""

"""


class Migration(migrations.Migration):
    dependencies = [
        ("pyscada", "0108_remove_calculatedvariable_period_and_more"),
        ("aggregation", "0003_move_calculated_variable"),
    ]

    operations = [
        migrations.CreateModel(
            name="AggregationVariableOld",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("last_check", models.DateTimeField(blank=True, null=True)),
                ("state", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "aggregation_variable",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pyscada.variable",
                    ),
                ),
                (
                    "period",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="aggregation.periodicfield",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AggregationDeviceOld",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "aggregation_device",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="pyscada.device"
                    ),
                ),
                (
                    "variable",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pyscada.variable",
                    ),
                ),
            ],
        ),
        migrations.RunPython(forwards_func, reverse_func),
        migrations.DeleteModel(
            name="AggregationVariable",
        ),
        migrations.DeleteModel(
            name="AggregationDevice",
        ),
    ]
